When would you want to use a remote repository rather than keeping all your work local?

	Any time I want to have my work backed up in case of local data loss, or if I want to
	collaborate on a project with one or more teammates.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	If I'm working on something locally and someone else push pushes to the origin master,
	I would lose my work upon those commits syncing back down to my remote.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

	Forks are clones internal to GitHub, clones are copies of a repo either that can be
	either local or remote. Branches are different versions of a codebase within the same
	repo that are not reachable from each other.

What is the benefit of having a copy of the last known state of the remote
stored locally?

	You can work to resolve merge conflicts offline and then push the result to the remote
    branch the next time you have internet access. This also allows you to ensure the
    changes you're working on will be compatible with the current remote master.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

	Collaborating on code without GitHub could happen in one of two ways. The first
	option would be to send zipped copies of the repo back and forth. This would make
	merging challenging. Second, you could use a self-hosted repo location accessible
	by all developers, but this would still make resolving pull requests a tedious
	task.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

	Any time one or more others want to continue working on Master while I re-architect
	or make a larger, unrelated change, I would want to make a separate branch. In reality,
	very little work should be done directly to master in a project involving multiple
	collaborators.